   1 0000               # FILE:         $File$
   2 0000               # AUTHOR:       P. White
   3 0000               # CONTRIBUTORS: M. Reek
   4 0000               # 		Joseph Farrell
   5 0000               #
   6 0000               # DESCRIPTION:
   7 0000               #  	This is a simple program to find the prime numbers between 3 - 101
   8 0000               #	inclusive.  This is done by using the simple algorithm where a 
   9 0000               #	number 'n' is prime if no number between 2 and n-1 divides evenly 
  10 0000               #	into 'n'
  11 0000               #
  12 0000               # ARGUMENTS:
  13 0000               #       None
  14 0000               #
  15 0000               # INPUT:
  16 0000               #	none
  17 0000               #
  18 0000               # OUTPUT:
  19 0000               #	the prime numbers printed 1 to a line
  20 0000               #
  21 0000               # REVISION HISTORY:
  22 0000               #       Dec  03         - P. White, created program
  23 0000               #       Mar  04         - M. Reek, added named constants
  24 0000               #
  25 0000               
  26 0000               #
  27 0000               # CONSTANT DECLARATIONS
  28 0000               #
  29 0000               PRINT_INT	= 1		# code for syscall to print integer
  30 0000               PRINT_STRING	= 4		# code for syscall to print a string
  31 0000               MIN		= 3		# minimum value to check
  32 0000               MAX		= 102		# max value to check
  33 0000               
  34 0000               #
  35 0000               # DATA DECLARATIONS
  36 0000               #
  37 0000               	.data
  38 0000               newline:
  39 0000 0A00    		.asciiz "\n"
  40 0002               #
  41 0002               # MAIN PROGRAM
  42 0002               #
  43 0000               	.text
  44 0000               	.align	2
  45 0000               	.globl	main
  46 0000               main:
  47 0000 23BDFFF8	        addi    $sp,$sp,-8  	# space for return address/doubleword aligned
  48 0004 AFBF0000	        sw      $ra, 0($sp)     # store the ra on the stack
  49 0008               
  50 0008 0C000006		jal	find_primes
  51 000c               
  52 000c                       #
  53 000c                       # Now exit the program.
  54 000c               	#
  55 000c 8FBF0000	        lw      $ra, 0($sp)	# clean up stack
  56 0010 23BD0008	        addi    $sp,$sp,8
  57 0014 03E00008	        jr      $ra
  58 0018               
  59 0018               #
  60 0018               # Name:		find_primes 
  61 0018               #
  62 0018               # Description:	find the prime numbers between 3 and 101 inclusive
  63 0018               # Arguments:	none
  64 0018               # Returns:	nothing
  65 0018               #
  66 0018               
  67 0018               find_primes:
  68 0018 23BDFFD8	        addi    $sp,$sp,-40     # allocate stack frame (on doubleword boundary)
  69 001c AFBF0020	        sw      $ra, 32($sp)    # store the ra & s reg's on the stack
  70 0020 AFB7001C	        sw      $s7, 28($sp)
  71 0024 AFB60018	        sw      $s6, 24($sp)
  72 0028 AFB50014	        sw      $s5, 20($sp)
  73 002c AFB40010	        sw      $s4, 16($sp)
  74 0030 AFB3000C	        sw      $s3, 12($sp)
  75 0034 AFB20008	        sw      $s2, 8($sp)
  76 0038 AFB10004	        sw      $s1, 4($sp)
  77 003c AFB00000	        sw      $s0, 0($sp)
  78 0040               
  79 0040               # ######################################
  80 0040               # ##### BEGIN STUDENT CODE BLOCK 1 #####
  81 0040               
  82 0040 20100003			addi	$s0, $zero, 3
  83 0044 20110066			addi	$s1, $zero, 102
  84 0048               		prime_loop:
  85 0048 0211402A				slt		$t0, $s0, $s1
  86 004c 11000008				beq		$t0, $zero, prime_done
  87 0050 00102020				add		$a0, $zero, $s0
  88 0054 0C000027				jal		is_prime
  89 0058 14400002				bne		$v0, $zero, print_prime
  90 005c 22100002				addi	$s0, $s0, 2
  91 0060 08000012				j prime_loop
  92 0064               		print_prime:
  93 0064 0C000048				jal 	print_number
  94 0068 22100002				addi	$s0, $s0, 2
  95 006c 08000012				j prime_loop
  96 0070               		prime_done:
  97 0070               
  98 0070               # ###### END STUDENT CODE BLOCK 1 ######
  99 0070               # ######################################
 100 0070               
 101 0070               
 102 0070 8FBF0020	        lw      $ra, 32($sp)    # restore the ra & s reg's from the stack
 103 0074 8FB7001C	        lw      $s7, 28($sp)
 104 0078 8FB60018	        lw      $s6, 24($sp)
 105 007c 8FB50014	        lw      $s5, 20($sp)
 106 0080 8FB40010	        lw      $s4, 16($sp)
 107 0084 8FB3000C	        lw      $s3, 12($sp)
 108 0088 8FB20008	        lw      $s2, 8($sp)
 109 008c 8FB10004	        lw      $s1, 4($sp)
 110 0090 8FB00000	        lw      $s0, 0($sp)
 111 0094 23BD0028	        addi    $sp,$sp,40      # clean up stack
 112 0098 03E00008		jr	$ra
 113 009c               
 114 009c               #
 115 009c               # Name:		is_prime 
 116 009c               #
 117 009c               # Description:	checks to see if the num passed in is prime
 118 009c               # Arguments:  	a0	The number to test to see if prime
 119 009c               # Returns: 	v0	a value of 1 if the number in a0 is prime
 120 009c               #			a value of 0 otherwise
 121 009c               #
 122 009c               
 123 009c               is_prime:
 124 009c 23BDFFD8	        addi    $sp,$sp,-40    	# allocate stackframe (doubleword aligned)
 125 00a0 AFBF0020	        sw      $ra, 32($sp)    # store the ra & s reg's on the stack
 126 00a4 AFB7001C	        sw      $s7, 28($sp)
 127 00a8 AFB60018	        sw      $s6, 24($sp)
 128 00ac AFB50014	        sw      $s5, 20($sp)
 129 00b0 AFB40010	        sw      $s4, 16($sp)
 130 00b4 AFB3000C	        sw      $s3, 12($sp)
 131 00b8 AFB20008	        sw      $s2, 8($sp)
 132 00bc AFB10004	        sw      $s1, 4($sp)
 133 00c0 AFB00000	        sw      $s0, 0($sp)
 134 00c4               
 135 00c4               # ######################################
 136 00c4               # ##### BEGIN STUDENT CODE BLOCK 2 #####
 137 00c4               
 138 00c4 20100002			addi $s0, $zero, 2					# s0 = 0
 139 00c8               		loop:								
 140 00c8 0204402A				slt $t0, $s0, $a0				# if(s0 < a0) { t0 = 1 }
 141 00cc 11000005				beq $t0, $zero, return_true		# if(t0 == 0) { goto return_true }
 142 00d0 0090001A				div $a0, $s0					# lo = a0 / s0, hi = a0 % s0
 143 00d4 00004810				mfhi $t1						# t1 = hi
 144 00d8 11200004				beq $t1, $zero, return_false	# if(t1 == 0) { goto return_false }
 145 00dc 22100001				addi $s0, $s0, 1				# s0++
 146 00e0 08000032				j loop							# goto loop
 147 00e4               		return_true:
 148 00e4 20020001				addi $v0, $zero, 1				# v0 = 1
 149 00e8 0800003D				j done							# goto done
 150 00ec               		return_false:
 151 00ec 20020000				addi $v0, $zero, 0				# v0 = 0
 152 00f0 0800003D				j done							# goto done
 153 00f4               		done:
 154 00f4               
 155 00f4               # ###### END STUDENT CODE BLOCK 2 ######
 156 00f4               # ######################################
 157 00f4               
 158 00f4 8FBF0020	        lw      $ra, 32($sp)    # restore the ra & s reg's from the stack
 159 00f8 8FB7001C	        lw      $s7, 28($sp)
 160 00fc 8FB60018	        lw      $s6, 24($sp)
 161 0100 8FB50014	        lw      $s5, 20($sp)
 162 0104 8FB40010	        lw      $s4, 16($sp)
 163 0108 8FB3000C	        lw      $s3, 12($sp)
 164 010c 8FB20008	        lw      $s2, 8($sp)
 165 0110 8FB10004	        lw      $s1, 4($sp)
 166 0114 8FB00000	        lw      $s0, 0($sp)
 167 0118 23BD0028	        addi    $sp,$sp,40      # clean up the stack
 168 011c 03E00008		jr	$ra
 169 0120               
 170 0120               #
 171 0120               # Name;		print_number 
 172 0120               #
 173 0120               # Description:	This routine reads a number then a newline to stdout
 174 0120               # Arguments:	a0,the number to print
 175 0120               # Returns:	nothing
 176 0120               #
 177 0120               print_number:
 178 0120               
 179 0120 34020001	        li 	$v0,PRINT_INT
 180 0124 0000000C	        syscall			#print a0
 181 0128               
 182 0128 3C040000	        la	$a0, newline
     012c 34840000
 183 0130 34020004	        li      $v0,PRINT_STRING
 184 0134 0000000C	        syscall			#print a newline
 185 0138               
 186 0138 03E00008	        jr      $ra


MAX           = 00000066   
MIN           = 00000003   
PRINT_INT     = 00000001   
PRINT_STRING  = 00000004   
done            000000F4 R  text 
find_primes     00000018 R  text 
is_prime        0000009C R  text 
loop            000000C8 R  text 
main            00000000 RG text 
newline         00000000 R  data 
prime_done      00000070 R  text 
prime_loop      00000048 R  text 
print_number    00000120 R  text 
print_prime     00000064 R  text 
return_false    000000EC R  text 
return_true     000000E4 R  text 
